const express = require('express');
const cors = require('cors');
const shell = require('shelljs');

const app = express();

app.use(cors());
app.use(express.json());

/**
 * MÃ©todos HTTP:
 * 
 * GET: Buscar informaÃ§Ãµes do back-end
 * POST: Criar uma informaÃ§Ã£o no back-end
 * PUT/PATCH: Alterar uma informaÃ§Ã£o no back-end
 * DELETE: Deletar uma informaÃ§Ã£o no back-end
 */

/**
* Tipos de parÃ¢metros:
* 
* Query Params: Filtros e paginaÃ§Ã£o
* Route Params: Identificar recursos (Atualizar/Deletar)
* Request Body: ConteÃºdo na hora de criar ou editar um recurso (JSON)
*/

/**
 * Middleware:
 * 
 * Interceptador de requisiÃ§Ãµes que pode interromper totalmente a requisiÃ§Ã£o ou alterar dados da requisiÃ§Ã£o.
 */

const projects = [];

function logRequests(request, response, next) {
  const { method, url } = request;

  /**
   * O mÃ©todo "toUppercase" precisa ser chamado sem os parÃªnteses para que nÃ£o 
   * apresente erro no insomnia, por exemplo
   * 
   * Antes:
   * const logLabel = `[${method.toUppercase()} ${url}]`;
   * 
   * Depois:
   * const logLabel = `[${method.toUppercase} ${url}]`;
   */
  
  const logLabel = `[${method.toUppercase} ${url}]`;

  console.time(logLabel);

  next(); // PrÃ³ximo middleware

  console.timeEnd(logLabel);
}

app.use(logRequests);



// ROUTES
app.get('/test', (request, response) => { 
  
  shell.exec('gh help');


  return response.json();
});
// ROUTES


app.listen(3333, () => {
  console.log('ğŸš€ Back-end started')
});
